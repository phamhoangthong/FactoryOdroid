//
// Created by phamh on 1/30/2018.
//
///////////////////////////////////////////////////////////////////////////////////////////////////
#include <unistd.h>
#include "MClient.h"
///////////////////////////////////////////////////////////////////////////////////////////////////
void* MCLIENT_THREAD(void *param) {
    MClient *p_client = (MClient*)(param);
    p_client->run();
}
///////////////////////////////////////////////////////////////////////////////////////////////////
MClient::MClient(int socket,string code) {
    init(socket,code);
}
///////////////////////////////////////////////////////////////////////////////////////////////////
MClient::MClient() {

}
///////////////////////////////////////////////////////////////////////////////////////////////////
MClient::~MClient() {
    stop();
}
///////////////////////////////////////////////////////////////////////////////////////////////////
void MClient::init(int socket, string code) {
    socket_tcp_ip = socket;
    m_code = code;
}
///////////////////////////////////////////////////////////////////////////////////////////////////
string MClient::getCode() {
    return m_code;
}
///////////////////////////////////////////////////////////////////////////////////////////////////
int MClient::start() {
    if(flag_run) {
        return -1;
    }
    flag_run = true;
    int rc = pthread_create(&m_thread, NULL, MCLIENT_THREAD, this);
    if(rc) {
        return -2;
    }
    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////
void MClient::run() {
    char *m_buffer = new char[SIZE_BUFFER];
    while(flag_run) {
        int n = read(socket_tcp_ip,m_buffer,SIZE_BUFFER);
        if(n <= 0) {
            flag_run = false;
            string msg = "Error received data";
            haveError(m_code,msg);
        }
        haveData(m_code, m_buffer, n);
    }
    delete[] m_buffer;
}
///////////////////////////////////////////////////////////////////////////////////////////////////
void MClient::stop() {
    if(flag_run) {
        flag_run = false;
        pthread_join(m_thread, NULL);
    }
    close(socket_tcp_ip);
}
///////////////////////////////////////////////////////////////////////////////////////////////////
void MClient::send(char *data, size_t length) {
    if(flag_run) {
        int n = write(socket_tcp_ip, data, length);
        if(n < 0) {
            string msg = "Error sended data";
            haveError(m_code,msg);
        }
        sended(m_code);
    } else {
        string msg = "Error sended data - socket is closed";
        haveError(m_code,msg);
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////